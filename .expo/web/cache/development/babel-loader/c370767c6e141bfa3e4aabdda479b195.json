{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, SwitchActions } from 'react-navigation';\nexport default function createTabNavigator(TabView) {\n  var NavigationView = function (_React$Component) {\n    _inherits(NavigationView, _React$Component);\n    var _super = _createSuper(NavigationView);\n    function NavigationView() {\n      var _this;\n      _classCallCheck(this, NavigationView);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _super.call.apply(_super, [this].concat(args));\n      _defineProperty(_assertThisInitialized(_this), \"_renderScene\", function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent\n        });\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_renderIcon\", function (_ref2) {\n        var route = _ref2.route,\n          focused = _ref2.focused,\n          tintColor = _ref2.tintColor,\n          _ref2$horizontal = _ref2.horizontal,\n          horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor,\n            horizontal: horizontal\n          }) : options.tabBarIcon;\n        }\n        return null;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getLabelText\", function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n        return route.routeName;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getAccessibilityLabel\", function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n        var label = _this._getLabelText({\n          route: route\n        });\n        if (typeof label === 'string') {\n          var routes = _this.props.navigation.state.routes;\n          return \"\".concat(label, \", tab, \").concat(routes.indexOf(route) + 1, \" of \").concat(routes.length);\n        }\n        return undefined;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getTestID\", function (_ref5) {\n        var route = _ref5.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_makeDefaultHandler\", function (_ref6) {\n        var route = _ref6.route,\n          navigation = _ref6.navigation;\n        return function () {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            _this._jumpTo(route.routeName);\n          }\n        };\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_handleTabPress\", function (_ref7) {\n        var route = _ref7.route;\n        _this._isTabPress = true;\n\n        Promise.resolve().then(function () {\n          return _this._isTabPress = false;\n        });\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n          options = descriptor.options;\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_handleTabLongPress\", function (_ref8) {\n        var route = _ref8.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n          options = descriptor.options;\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n        if (options.tabBarOnLongPress) {\n          options.tabBarOnLongPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_handleIndexChange\", function (index) {\n        if (_this._isTabPress) {\n          _this._isTabPress = false;\n          return;\n        }\n        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_jumpTo\", function (routeName) {\n        var navigation = _this.props.navigation;\n        navigation.dispatch(SwitchActions.jumpTo({\n          routeName: routeName,\n          key: navigation.state.key\n        }));\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_isTabPress\", false);\n      return _this;\n    }\n    _createClass(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n          descriptors = _this$props2.descriptors,\n          navigation = _this$props2.navigation,\n          screenProps = _this$props2.screenProps,\n          navigationConfig = _this$props2.navigationConfig;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n        return (\n          React.createElement(TabView, _extends({}, navigationConfig, descriptor.options, {\n            getLabelText: this._getLabelText,\n            getAccessibilityLabel: this._getAccessibilityLabel,\n            getTestID: this._getTestID,\n            renderIcon: this._renderIcon,\n            renderScene: this._renderScene,\n            onIndexChange: this._handleIndexChange,\n            onTabPress: this._handleTabPress,\n            onTabLongPress: this._handleTabLongPress,\n            navigation: navigation,\n            descriptors: descriptors,\n            screenProps: screenProps\n          }))\n        );\n      }\n    }]);\n    return NavigationView;\n  }(React.Component);\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}","map":{"version":3,"sources":["createTabNavigator.tsx"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","SwitchActions","createTabNavigator","TabView","NavigationView","Component","route","screenProps","descriptors","props","descriptor","key","TabComponent","getComponent","navigation","focused","tintColor","horizontal","options","tabBarIcon","tabBarLabel","title","routeName","tabBarAccessibilityLabel","label","_getLabelText","routes","state","indexOf","length","undefined","tabBarTestID","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_isTabPress","Promise","resolve","then","defaultHandler","_makeDefaultHandler","tabBarOnPress","tabBarOnLongPress","jumpTo","render","navigationConfig","_getAccessibilityLabel","_getTestID","_renderIcon","_renderScene","_handleIndexChange","_handleTabPress","_handleTabLongPress","config","router"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}