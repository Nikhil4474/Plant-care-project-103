{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"navigation\", \"activeTintColor\", \"inactiveTintColor\", \"renderIcon\", \"getLabelText\", \"allowFontScaling\", \"showLabel\", \"showIcon\", \"upperCaseLabel\", \"tabBarPosition\", \"screenProps\", \"iconStyle\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nvar TabBarTop = function (_React$PureComponent) {\n  _inherits(TabBarTop, _React$PureComponent);\n  var _super = _createSuper(TabBarTop);\n  function TabBarTop() {\n    var _this;\n    _classCallCheck(this, TabBarTop);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"_renderLabel\", function (_ref) {\n      var route = _ref.route,\n        focused = _ref.focused,\n        color = _ref.color;\n      var _this$props = _this.props,\n        showLabel = _this$props.showLabel,\n        upperCaseLabel = _this$props.upperCaseLabel,\n        labelStyle = _this$props.labelStyle,\n        allowFontScaling = _this$props.allowFontScaling;\n      if (showLabel === false) {\n        return null;\n      }\n      var label = _this.props.getLabelText({\n        route: route\n      });\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: color\n        });\n      }\n      return label;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_renderIcon\", function (_ref2) {\n      var route = _ref2.route,\n        focused = _ref2.focused,\n        color = _ref2.color;\n      var _this$props2 = _this.props,\n        renderIcon = _this$props2.renderIcon,\n        showIcon = _this$props2.showIcon,\n        iconStyle = _this$props2.iconStyle;\n      if (showIcon === false) {\n        return null;\n      }\n      return React.createElement(View, {\n        style: [styles.icon, iconStyle]\n      }, renderIcon({\n        route: route,\n        focused: focused,\n        tintColor: color\n      }));\n    });\n    return _this;\n  }\n  _createClass(TabBarTop, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n        navigation = _this$props3.navigation,\n        activeTintColor = _this$props3.activeTintColor,\n        inactiveTintColor = _this$props3.inactiveTintColor,\n        renderIcon = _this$props3.renderIcon,\n        getLabelText = _this$props3.getLabelText,\n        allowFontScaling = _this$props3.allowFontScaling,\n        showLabel = _this$props3.showLabel,\n        showIcon = _this$props3.showIcon,\n        upperCaseLabel = _this$props3.upperCaseLabel,\n        tabBarPosition = _this$props3.tabBarPosition,\n        screenProps = _this$props3.screenProps,\n        iconStyle = _this$props3.iconStyle,\n        rest = _objectWithoutProperties(_this$props3, _excluded);\n      return React.createElement(TabBar, _extends({}, rest, {\n        activeColor: activeTintColor,\n        inactiveColor: inactiveTintColor,\n        navigationState: navigation.state,\n        renderIcon: this._renderIcon,\n        renderLabel: this._renderLabel\n      }));\n    }\n  }]);\n  return TabBarTop;\n}(React.PureComponent);\nexport { TabBarTop as default };\n_defineProperty(TabBarTop, \"defaultProps\", {\n  activeTintColor: 'rgba(255, 255, 255, 1)',\n  inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n});\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["React","TabBar","Animated","TabBarTop","PureComponent","activeTintColor","inactiveTintColor","showIcon","showLabel","upperCaseLabel","allowFontScaling","route","focused","color","labelStyle","props","label","getLabelText","styles","toUpperCase","tintColor","renderIcon","iconStyle","icon","render","navigation","tabBarPosition","screenProps","rest","state","_renderIcon","_renderLabel","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { MaterialTabBarProps } from '../types';\n\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\n\nexport default class TabBarTop extends React.PureComponent<\n  MaterialTabBarProps\n> {\n  static defaultProps = {\n    activeTintColor: 'rgba(255, 255, 255, 1)',\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = ({ route, focused, color }: Scene) => {\n    const {\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor: color });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, focused, color }: Scene) => {\n    const { renderIcon, showIcon, iconStyle } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.icon, iconStyle]}>\n        {renderIcon({\n          route,\n          focused,\n          tintColor: color,\n        })}\n      </View>\n    );\n  };\n\n  render() {\n    const {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    return (\n      <TabBar\n        {...rest}\n        activeColor={activeTintColor}\n        inactiveColor={inactiveTintColor}\n        navigationState={navigation.state}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}