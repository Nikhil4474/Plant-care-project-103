{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\nvar TabNavigationView = function (_React$PureComponent) {\n  _inherits(TabNavigationView, _React$PureComponent);\n  var _super = _createSuper(TabNavigationView);\n  function TabNavigationView() {\n    var _this;\n    _classCallCheck(this, TabNavigationView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loaded: [_this.props.navigation.state.index]\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_getButtonComponent\", function (_ref) {\n      var route = _ref.route;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n      return undefined;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_renderTabBar\", function () {\n      var _this$props = _this.props,\n        _this$props$tabBarCom = _this$props.tabBarComponent,\n        TabBarComponent = _this$props$tabBarCom === void 0 ? BottomTabBar : _this$props$tabBarCom,\n        tabBarOptions = _this$props.tabBarOptions,\n        navigation = _this$props.navigation,\n        screenProps = _this$props.screenProps,\n        getLabelText = _this$props.getLabelText,\n        getAccessibilityLabel = _this$props.getAccessibilityLabel,\n        getAccessibilityRole = _this$props.getAccessibilityRole,\n        getAccessibilityStates = _this$props.getAccessibilityStates,\n        getTestID = _this$props.getTestID,\n        renderIcon = _this$props.renderIcon,\n        onTabPress = _this$props.onTabPress,\n        onTabLongPress = _this$props.onTabLongPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        getLabelText: getLabelText,\n        getButtonComponent: _this._getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessibilityRole: getAccessibilityRole,\n        getAccessibilityStates: getAccessibilityStates,\n        getTestID: getTestID,\n        renderIcon: renderIcon\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_jumpTo\", function (key) {\n      var _this$props2 = _this.props,\n        navigation = _this$props2.navigation,\n        onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    });\n    return _this;\n  }\n  _createClass(TabNavigationView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n        navigation = _this$props3.navigation,\n        renderScene = _this$props3.renderScene,\n        lazy = _this$props3.lazy,\n        _this$props3$detachIn = _this$props3.detachInactiveScreens,\n        detachInactiveScreens = _this$props3$detachIn === void 0 ? true : _this$props3$detachIn;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      var enabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(ScreenContainer, {\n        enabled: enabled,\n        style: styles.pages\n      }, routes.map(function (route, index) {\n        if (lazy && !loaded.includes(index)) {\n          return null;\n        }\n        var isFocused = navigation.state.index === index;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          isVisible: isFocused,\n          enabled: detachInactiveScreens\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n  return TabNavigationView;\n}(React.PureComponent);\n_defineProperty(TabNavigationView, \"defaultProps\", {\n  lazy: true,\n  getAccessibilityRole: function getAccessibilityRole() {\n    return 'button';\n  },\n  getAccessibilityStates: function getAccessibilityStates(_ref2) {\n    var focused = _ref2.focused;\n    return focused ? ['selected'] : [];\n  }\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["createBottomTabNavigator.tsx"],"names":["React","ScreenContainer","screensEnabled","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","PureComponent","lazy","getAccessibilityRole","getAccessibilityStates","focused","nextProps","prevState","index","navigation","state","loaded","includes","props","route","descriptors","descriptor","key","options","tabBarButtonComponent","undefined","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getTestID","renderIcon","onTabPress","onTabLongPress","routes","tabBarVisible","_jumpTo","_getButtonComponent","onIndexChange","findIndex","render","renderScene","detachInactiveScreens","enabled","styles","container","pages","map","isFocused","StyleSheet","absoluteFill","_renderTabBar","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { NavigationRoute } from 'react-navigation';\n\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\nimport {\n  NavigationTabProp,\n  NavigationBottomTabOptions,\n  BottomTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Config = {\n  lazy?: boolean;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: BottomTabBarOptions;\n  detachInactiveScreens?: boolean;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    getAccessibilityRole: (props: {\n      route: NavigationRoute;\n    }) => AccessibilityRole | undefined;\n    getAccessibilityStates: (props: {\n      route: NavigationRoute;\n      focused: boolean;\n    }) => string[];\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\ntype State = {\n  loaded: number[];\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: (): AccessibilityRole => 'button',\n    getAccessibilityStates: ({ focused }: { focused: boolean }) =>\n      focused ? ['selected'] : [],\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _getButtonComponent = ({ route }: { route: NavigationRoute }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarButtonComponent) {\n      return options.tabBarButtonComponent;\n    }\n\n    return undefined;\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={this._getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const {\n      navigation,\n      renderScene,\n      lazy,\n      detachInactiveScreens = true,\n    } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    const enabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <View style={styles.container}>\n        {/* @ts-ignore */}\n        <ScreenContainer enabled={enabled} style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator<Config, NavigationBottomTabOptions, Props>(\n  TabNavigationView\n);\n"]},"metadata":{},"sourceType":"module"}