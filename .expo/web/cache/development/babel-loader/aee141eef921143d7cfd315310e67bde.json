{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from 'react-native-reanimated';\nvar TabBarIcon = function (_React$Component) {\n  _inherits(TabBarIcon, _React$Component);\n  var _super = _createSuper(TabBarIcon);\n  function TabBarIcon() {\n    _classCallCheck(this, TabBarIcon);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TabBarIcon, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        route = _this$props.route,\n        activeOpacity = _this$props.activeOpacity,\n        inactiveOpacity = _this$props.inactiveOpacity,\n        activeTintColor = _this$props.activeTintColor,\n        inactiveTintColor = _this$props.inactiveTintColor,\n        renderIcon = _this$props.renderIcon,\n        horizontal = _this$props.horizontal,\n        style = _this$props.style;\n\n      return React.createElement(View, {\n        style: style\n      }, React.createElement(Animated.View, {\n        style: [styles.icon, {\n          opacity: activeOpacity\n        }]\n      }, renderIcon({\n        route: route,\n        focused: true,\n        horizontal: horizontal,\n        tintColor: activeTintColor\n      })), React.createElement(Animated.View, {\n        style: [styles.icon, {\n          opacity: inactiveOpacity\n        }]\n      }, renderIcon({\n        route: route,\n        focused: false,\n        horizontal: horizontal,\n        tintColor: inactiveTintColor\n      })));\n    }\n  }]);\n  return TabBarIcon;\n}(React.Component);\nexport { TabBarIcon as default };\nvar styles = StyleSheet.create({\n  icon: {\n    position: 'absolute',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    minWidth: 25\n  }\n});","map":{"version":3,"sources":["CrossFadeIcon.tsx"],"names":["React","Animated","TabBarIcon","Component","render","route","activeOpacity","inactiveOpacity","activeTintColor","inactiveTintColor","renderIcon","horizontal","style","props","styles","icon","opacity","focused","tintColor","create","position","alignSelf","alignItems","justifyContent","height","width","minWidth"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,OAAOC,QAAP,MAAqB,yBAArB;AAAA,IAmBqBC,UAAN;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACbE,kBAAS;MACP,kBASI,IAAA,CAAKS,KAVF;QAELR,KADI,eACJA,KADI;QAEJC,aAFI,eAEJA,aAFI;QAGJC,eAHI,eAGJA,eAHI;QAIJC,eAJI,eAIJA,eAJI;QAKJC,iBALI,eAKJA,iBALI;QAMJC,UANI,eAMJA,UANI;QAOJC,UAPI,eAOJA,UAPI;QAQJC,KAAAA,eAAAA,KAAAA;;MAKF,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;QAAM,KAAK,EAAEA;MAAb,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAU,IAAV,EAAA;QAAe,KAAK,EAAE,CAACE,MAAM,CAACC,IAAR,EAAc;UAAEC,OAAO,EAAEV;QAAX,CAAd;MAAtB,CAAA,EACGI,UAAU,CAAC;QACVL,KADU,EACVA,KADU;QAEVY,OAAO,EAAE,IAFC;QAGVN,UAHU,EAGVA,UAHU;QAIVO,SAAS,EAAEV;MAJD,CAAD,CADb,CADF,EASE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAU,IAAV,EAAA;QAAe,KAAK,EAAE,CAACM,MAAM,CAACC,IAAR,EAAc;UAAEC,OAAO,EAAET;QAAX,CAAd;MAAtB,CAAA,EACGG,UAAU,CAAC;QACVL,KADU,EACVA,KADU;QAEVY,OAAO,EAAE,KAFC;QAGVN,UAHU,EAGVA,UAHU;QAIVO,SAAS,EAAET;MAJD,CAAD,CADb,CATF,CADF;IAoBD;EAAA;EAAA;AAAA,EAnCqCT,KAAK,CAACG,SAA/B;AAAA,SAAMD,UAAN;AAsCf,IAAMY,MAAM,GAAG,UAAU,CAACK,MAAX,CAAkB;EAC/BJ,IAAI,EAAE;IAIJK,QAAQ,EAAE,UAJN;IAKJC,SAAS,EAAE,QALP;IAMJC,UAAU,EAAE,QANR;IAOJC,cAAc,EAAE,QAPZ;IAQJC,MAAM,EAAE,MARJ;IASJC,KAAK,EAAE,MATH;IAWJC,QAAQ,EAAE;EAXN;AADyB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\n\ntype Props = {\n  route: NavigationRoute;\n  horizontal?: boolean;\n  activeOpacity: number;\n  inactiveOpacity: number;\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n  renderIcon: (props: {\n    route: NavigationRoute;\n    focused: boolean;\n    tintColor?: string;\n    horizontal?: boolean;\n  }) => React.ReactNode;\n  style: StyleProp<ViewStyle>;\n};\n\nexport default class TabBarIcon extends React.Component<Props> {\n  render() {\n    const {\n      route,\n      activeOpacity,\n      inactiveOpacity,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      horizontal,\n      style,\n    } = this.props;\n\n    // We render the icon twice at the same position on top of each other:\n    // active and inactive one, so we can fade between them.\n    return (\n      <View style={style}>\n        <Animated.View style={[styles.icon, { opacity: activeOpacity }]}>\n          {renderIcon({\n            route,\n            focused: true,\n            horizontal,\n            tintColor: activeTintColor,\n          })}\n        </Animated.View>\n        <Animated.View style={[styles.icon, { opacity: inactiveOpacity }]}>\n          {renderIcon({\n            route,\n            focused: false,\n            horizontal,\n            tintColor: inactiveTintColor,\n          })}\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    // We render the icon twice at the same position on top of each other:\n    // active and inactive one, so we can fade between them:\n    // Cover the whole iconContainer:\n    position: 'absolute',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    // Workaround for react-native >= 0.54 layout bug\n    minWidth: 25,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}